import { HttpStatus } from '../constant/constant.js';
import sendSuccessResponse from '../helper/apiResponseHandler.js';
import { Subject, Teacher, User } from '../schemaModels/model.js';
import asyncErrorHandler from '../utils/asyncHandler.js';
import deleteFile from '../utils/deleteFile.js';
import generateStrongPassword from '../utils/passwordGenerator.js';
import sendMail from '../utils/sendMail.js';
import { throwError } from '../utils/throwError.js';

import mongoose from 'mongoose';

export const addTeacher = asyncErrorHandler(async (req, res) => {

    const profileImgFileName = req?.file?.filename || "default-profile-img.jpeg";

    let teacherDetails = req.body.teacherDetails;

    /* Checking if all the fields are attached to the req body  */
    if (!teacherDetails) {
        throwError({ statusCode: HttpStatus.BAD_REQUEST, message: "All the fields are required", })
    }

    teacherDetails = JSON.parse(teacherDetails);

    const { name, email, gender, joiningDate, address, subjectID, phoneNumber } = teacherDetails;

    /* Checking if all the fields are attached to the req body  */
    if (!name || !email || !gender || !joiningDate || !address || !phoneNumber || !subjectID) {
        throwError({ statusCode: HttpStatus.BAD_REQUEST, message: "All the fields are required", })
    }

    if (!mongoose.Types.ObjectId.isValid(subjectID)) {
        throwError({ statusCode: HttpStatus.NOT_FOUND, message: "Subject not found", })
    }

    const isSubjectExists = await Subject.findById(subjectID)

    if (!isSubjectExists) {
        throwError({ statusCode: HttpStatus.NOT_FOUND, message: "Subject not found", })
    }

    // Getting user data if it exists
    const isTeacherExists = await Teacher.findOne({ email });

    if (isTeacherExists) {
        throwError({ statusCode: HttpStatus.CONFLICT, message: "Teacher already exists" })
    }

    // Generating the 8 digit strong password
    const autoGeneratedPassword = generateStrongPassword()

    const mailMessage = {
        from: process.env.email,
        to: email,
        subject: 'Welcome to Learnovate!',
        html: `
          <p>Hello ${name},</p>
          <p>Welcome to the system! Your account has been created.</p>
          <p>Your autogenerated password is: <b>${autoGeneratedPassword}<b> </p>
          <p>Please make sure to change your password after logging in for the first time.</p>
          <p>Thank you!</p>
        `,
    };

    // Storing user data in db
    const teacher = Teacher({
        name,
        email,
        password: autoGeneratedPassword,
        phoneNumber,
        address,
        gender,
        joiningDate: new Date(joiningDate),
        subject: subjectID,
        profileImg: profileImgFileName
    })

    const newTeacherDetails = await teacher.save();

    // Sending the mail 
    await sendMail(mailMessage)

    sendSuccessResponse({
        res,
        statusCode: HttpStatus.CREATED,
        message: "Teacher is added successfully",
        data: newTeacherDetails
    })

})

// Get all Teachers
export const getAllTeachers = asyncErrorHandler(async (req, res) => {

    const teachers = await Teacher.find({}, { password: false }).sort({ createdAt: -1 }).populate("subject");

    sendSuccessResponse({
        res,
        statusCode: HttpStatus.OK,
        message: "All teachers data has been retrieved",
        data: teachers
    })

})


// Update User
export const updateTeacher = asyncErrorHandler(async (req, res) => {

    const teacherID = req.params.teacherID;

    if (!mongoose.Types.ObjectId.isValid(teacherID)) {
        throwError({ statusCode: HttpStatus.NOT_FOUND, message: "Teacher not found", })
    }

    const newProfileImg = req?.file?.filename;

    let updatedData = req.body.updatedData;

    if (!teacherID || !updatedData) {
        throwError({ statusCode: HttpStatus.BAD_REQUEST, message: 'teacherID or updated data is required' });
    }

    updatedData = JSON.parse(updatedData)

    console.log(newProfileImg.slice(14));

    const teacher = await Teacher.findById(teacherID);

    if (!teacher) {
        throwError({ statusCode: HttpStatus.NOT_FOUND, message: 'User not found' });
    }

    if (newProfileImg) {
        deleteFile(teacher.profileImg)
        updatedData.profileImg = newProfileImg;
    }


    // Update user's data based on newData
    Object.assign(teacher, updatedData);

    const newTeacherData = await teacher.save();

    sendSuccessResponse({
        res,
        statusCode: HttpStatus.OK,
        message: "User updated successfully",
        data: newTeacherData
    });
});

export const deleteTeacher = asyncErrorHandler(async (req, res) => {

    const email = req.params.email;

    if (!email) {
        throwError({ statusCode: HttpStatus.BAD_REQUEST, message: 'Email is required' });
    }

    const teacher = await Teacher.findOne({ email });

    if (!teacher) {
        throwError({ statusCode: HttpStatus.NOT_FOUND, message: 'Teacher not found' });
    }

    await Teacher.deleteOne({ email });

    sendSuccessResponse({
        res,
        statusCode: HttpStatus.OK,
        message: "Teacher is deleted successfully"
    });
});


// Retrieve a teacher by ID
export const getTeacherByID = asyncErrorHandler(async (req, res) => {

    const teacherID = req.params.teacherID;

    if (!mongoose.Types.ObjectId.isValid(teacherID)) {
        throwError({
            message: "Teacher not found",
            statusCode: HttpStatus.NOT_FOUND,
        });
    }

    const teacher = await Teacher.findById(teacherID).populate("subject");

    if (!teacher || !teacher.subject) {
        throwError({
            message: "Teacher not found",
            statusCode: HttpStatus.NOT_FOUND,
        });
    }

    sendSuccessResponse({
        res,
        data: teacher,
        message: "teacher retrieved successfully",
    });
});

export const disableTeacherAccount = asyncErrorHandler(async (req, res) => {

    const teacherID = req.params.teacherID;

    if (!mongoose.Types.ObjectId.isValid(teacherID)) {
        throwError({
            message: "Teacher not found",
            statusCode: HttpStatus.NOT_FOUND,
        });
    }

    const teacher = await Teacher.findById(teacherID);

    if (!teacher) {
        throwError({
            message: "Teacher not found",
            statusCode: HttpStatus.NOT_FOUND,
        });
    }


    teacher.disableAccount = !teacher.disableAccount;

    await teacher.save();

    sendSuccessResponse({
        res,
        message: teacher.disableAccount ? "Teacher account is successfully deactivated" : "Teacher account is successfully activated",
    })
})


// Get emails of all students
export const getAllStudentEmails = async () => {
    try {
        const students = await User.find({ role: 'student' }).select('email');

        if (!students || students.length === 0) {
            throwError({ statusCode: HttpStatus.NOT_FOUND, message: 'No students found' });
        }

        const studentEmails = students.map(student => student.email);

        return studentEmails;
    } catch (error) {
        return [];
    }
};
